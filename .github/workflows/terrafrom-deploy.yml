name: Terraform Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'non-prod'
        type: choice
        options:
          - non-prod
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.7.4'
  AWS_REGION: 'us-east-1'

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'non-prod' }}
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Create directories for cloud-init rendered files
      run: |
        mkdir -p terraform/environments/${{ github.event.inputs.environment || 'non-prod' }}/rendered
        chmod -R 755 terraform/environments/${{ github.event.inputs.environment || 'non-prod' }}/rendered


    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: terraform/environments/${{ github.event.inputs.environment || 'non-prod' }}

    - name: Terraform Validate
      id: validate
      run: terraform validate
      working-directory: terraform/environments/${{ github.event.inputs.environment || 'non-prod' }}

    - name: Terraform Plan
      id: plan
      if: github.event.inputs.action != 'destroy'
      run: terraform plan -no-color -input=false
      working-directory: terraform/environments/${{ github.event.inputs.environment || 'non-prod' }}

    - name: Terraform Plan Destroy
      id: plan-destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform plan -destroy -no-color -input=false
      working-directory: terraform/environments/${{ github.event.inputs.environment || 'non-prod' }}

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      run: terraform apply -auto-approve -input=false
      working-directory: terraform/environments/${{ github.event.inputs.environment || 'non-prod' }}

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform destroy -auto-approve -input=false
      working-directory: terraform/environments/${{ github.event.inputs.environment || 'non-prod' }}

    - name: Add PR Comment with Terraform Plan
      if: github.event_name == 'pull_request' && (github.event.inputs.action == 'plan' || github.event.inputs.action == '')
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform
          ${{ steps.plan.outputs.stdout || steps.plan-destroy.outputs.stdout }}
          \`\`\`

          </details>`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })